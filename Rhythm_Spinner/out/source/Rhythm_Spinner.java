/* autogenerated by Processing revision 1293 on 2023-11-23 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.awt.event.KeyEvent;
import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Rhythm_Spinner extends PApplet {




Spinner spinner = new Spinner();
SoundFile testFile;
ArrayList<Note> testChart = new ArrayList<Note>();
Song testSong;

public void setup() {
    /* size commented out by preprocessor */;
    rectMode(CENTER);
    ellipseMode(RADIUS);

    testFile = new SoundFile(this, "Test Song.wav");

    testChart.add(new Note(0, 1));
    testChart.add(new Note(4, 2));
    testChart.add(new Note(0, 3.5f));
    testChart.add(new Note(4, 4));

    testSong = new Song(120, 0.002f, testFile, testChart, "Test Song", "Me");
}

public void draw() {
    background(255);

    updateInputs();

    spinner.draw();

    for(Note note : testSong.chart) {
        note.draw();
    }
}

public void updateInputs() {
    spinner.update();
    Conductor.update();

    for(Note note : testSong.chart) {
        note.update();
    }
    for(int i = 0; i < testSong.chart.size(); i++) {
        while(true) {
            if(testSong.chart.size() <= 0) {
                break;
            }
            if(Conductor.songPosition > testSong.chart.get(i).beat + 0.25f) {
                testSong.chart.remove(i);
            } else {
                break;
            }
        }
    }
}

public void keyPressed() {
    InputManager.addKey(keyCode);
    updateInputs();

    if(keyCode == 32) {
        Conductor.setSong(testSong);
        testSong.songFile.play();
        println(Conductor.crotchet);
    }
}

public void keyReleased() {
    InputManager.removeKey(keyCode);
    updateInputs();
}
/**
* Conductor class
* Taken from https://www.reddit.com/r/gamedev/comments/2fxvk4/heres_a_quick_and_dirty_guide_i_just_wrote_how_to/
*/
static class Conductor {
    private static int bpm;
    private static float crotchet;
    private static float offset;
    public static float songPosition;
    private static SoundFile songFile;

    public static void update() {
        if(songFile != null) {

            songPosition = (songFile.position() - offset) / crotchet;
        }
    }

    public static void setSong(Song song) {
        bpm = song.bpm;
        crotchet = (float) 60 / song.bpm;
        offset = song.offset;
        songFile = song.songFile;
    }
}
/**
* Input Manger Class
* Stores all currently pressed keys and manages inputs
*/
static class InputManager {

    //List of currently held keys
    public static ArrayList<Integer> keys = new ArrayList<Integer>();

    /**
    * Adds a key to the input manager
    * Must be called in keyPressed
    *
    * @param the key to be added
    */
    public static void addKey(int key) {
        if(!keys.contains(key)) {
            keys.add(key);
        }
    }

    /**
    * Removes a key from the input manager
    * Must be called in keyPressed
    *
    * @param the key to be added
    */
    public static void removeKey(int key) {
        keys.remove(keys.indexOf(key));
    }

    public static int getDirection() {
        if(keys.contains(KeyEvent.VK_RIGHT) && keys.contains(KeyEvent.VK_DOWN)) {
            return 1;
        } else if(keys.contains(KeyEvent.VK_LEFT) && keys.contains(KeyEvent.VK_DOWN)) {
            return 3;
        } else if(keys.contains(KeyEvent.VK_LEFT) && keys.contains(KeyEvent.VK_UP)) {
            return 5;
        } else if(keys.contains(KeyEvent.VK_RIGHT) && keys.contains(KeyEvent.VK_UP)) {
            return 7;
        } else if(keys.contains(KeyEvent.VK_RIGHT)) {
            return 0;
        } else if(keys.contains(KeyEvent.VK_DOWN)) {
            return 2;
        } else if(keys.contains(KeyEvent.VK_LEFT)) {
            return 4;
        } else if(keys.contains(KeyEvent.VK_UP)) {
            return 6;
        }

        return -1;
    }
}
class Note {
    private int lane;
    private float beat;
    public PVector position;

    Note(int lane, float beat) {
        this.lane = lane;
        this.beat = beat;
    }

    public void update() {
        this.position = new PVector(sin(radians(this.lane * 45)) * ((this.beat - Conductor.songPosition) * 100 + spinner.radius) + 640,
                                    cos(radians(this.lane * 45)) * ((this.beat - Conductor.songPosition) * 100 + spinner.radius) + 512);
    }

    public void draw() {
        float radius = dist(640, 512, this.position.x, this.position.y);
        noFill();
        arc(640, 512, radius, radius, radians(-22.5f + (this.lane * 45)), radians(-22.5f + ((this.lane + 1) * 45)));
    }
}
class Song {
    public int bpm;
    public float offset;
    public SoundFile songFile;
    public ArrayList<Note> chart;
    public String title, artist;

    Song(int bpm, float offset, SoundFile songFile, ArrayList<Note> chart, String title, String artist) {
        this.bpm = bpm;
        this.offset = offset;
        this.songFile = songFile;
        this.chart = chart;
        this.title = title;
        this.artist = artist;
    }
}
class Spinner {
    private PVector position = new PVector(640, 512);
    public float radius = 80;
    private int mainColor = color(255, 150, 150);
    private int selectedColor = color(255, 150, 255);
    public int selectedSegment = 0;

    public void update() {
        selectedSegment = InputManager.getDirection();
    }

    public void draw() {
        for(int i = 0; i < 8; i++) {
            if(i == selectedSegment) {
                fill(selectedColor);
            } else {
                fill(mainColor);
            }

            arc(position.x, position.y, radius, radius, radians(-22.5f + (i * 45)), radians(-22.5f + ((i + 1) * 45)), PIE);
        }
    }
}


  public void settings() { size(1280, 1024); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Rhythm_Spinner" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}

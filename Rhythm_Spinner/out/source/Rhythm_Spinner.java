/* autogenerated by Processing revision 1293 on 2023-11-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.awt.event.KeyEvent;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Rhythm_Spinner extends PApplet {



Spinner spinner = new Spinner();

public void setup() {
    /* size commented out by preprocessor */;
    rectMode(CENTER);
    ellipseMode(RADIUS);
}

public void draw() {
    updateInputs();

    spinner.draw();
}

public void updateInputs() {
    spinner.update();
}

public void keyPressed() {
    InputManager.addKey(keyCode);
    updateInputs();
}

public void keyReleased() {
    InputManager.removeKey(keyCode);
    updateInputs();
}
/**
* Input Manger Class
* Stores all currently pressed keys and manages inputs
*/
static class InputManager {

    //List of currently held keys
    public static ArrayList<Integer> keys = new ArrayList<Integer>();

    /**
    * Adds a key to the input manager
    * Must be called in keyPressed
    *
    * @param the key to be added
    */
    public static void addKey(int key) {
        if(!keys.contains(key)) {
            keys.add(key);
        }
    }

    /**
    * Removes a key from the input manager
    * Must be called in keyPressed
    *
    * @param the key to be added
    */
    public static void removeKey(int key) {
        keys.remove(keys.indexOf(key));
    }

    public static int getDirection() {
        if(keys.contains(KeyEvent.VK_RIGHT) && keys.contains(KeyEvent.VK_DOWN)) {
            return 1;
        } else if(keys.contains(KeyEvent.VK_LEFT) && keys.contains(KeyEvent.VK_DOWN)) {
            return 3;
        } else if(keys.contains(KeyEvent.VK_LEFT) && keys.contains(KeyEvent.VK_UP)) {
            return 5;
        } else if(keys.contains(KeyEvent.VK_RIGHT) && keys.contains(KeyEvent.VK_UP)) {
            return 7;
        } else if(keys.contains(KeyEvent.VK_RIGHT)) {
            return 0;
        } else if(keys.contains(KeyEvent.VK_DOWN)) {
            return 2;
        } else if(keys.contains(KeyEvent.VK_LEFT)) {
            return 4;
        } else if(keys.contains(KeyEvent.VK_UP)) {
            return 6;
        }

        return -1;
    }
}
class Spinner {
    private PVector position = new PVector(640, 512);
    private float radius = 80;
    private int mainColor = color(255, 150, 150);
    private int selectedColor = color(255, 150, 255);
    public int selectedSegment = 0;

    public void update() {
        selectedSegment = InputManager.getDirection();
    }

    public void draw() {
        for(int i = 0; i < 8; i++) {
            if(i == selectedSegment) {
                fill(selectedColor);
            } else {
                fill(mainColor);
            }

            arc(position.x, position.y, radius, radius, radians(-22.5f + (i * 45)), radians(-22.5f + ((i + 1) * 45)), PIE);
        }
    }
}


  public void settings() { size(1280, 1024); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Rhythm_Spinner" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
